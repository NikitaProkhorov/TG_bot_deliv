import math
import asyncio
import sqlite3
import datetime

from main import dp, bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery, Message
from handler.handler_delete import self_delete_message
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboard.kb_client import deliv, adres, time, hourse, min, pay, Bonus

class Form(StatesGroup):
    bonus = State()
    kolvo = State()
    dostavka = State() 
    comment = State()
    address = State()
    time = State()  
    hourse = State()
    min = State()
    pay = State()

#–ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ 
@dp.callback_query_handler(text_contains='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def dev(call: CallbackQuery):
    now = datetime.datetime.now().time()
    start_time = datetime.time(0, 0)  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    end_time = datetime.time(23, 59)  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

    if start_time <= now <= end_time:
        connect = sqlite3.connect('bot.db')
        cursor = connect.cursor()
        cursor.execute("""DELETE FROM deliv WHERE user_id=(?)""", [call.from_user.id])
        cursor.execute("""DELETE FROM card WHERE user_id=(?) AND prod_id=(?)""", ((call.from_user.id), '–ë–æ–Ω—É—Å—ã'))
        bon = cursor.execute("""SELECT bonus FROM users WHERE user_id=(?)""", [call.from_user.id]).fetchone()[0]
        sum = cursor.execute("""SELECT SUM(price) FROM card WHERE user_id=(?)""", [call.from_user.id]).fetchone()[0]
        prod = cursor.execute("""SELECT prod_id, price, value FROM card WHERE user_id=(?)""", [call.from_user.id]).fetchall()

        card = []
        for i in prod:
            card.append(f"{i[0]} √ó {i[2]}—à—Ç = {i[1]}‚ÇΩ")
        res = ("\n‚îú".join(map(str, card)))

        cursor.close()
        connect.commit()

        if card == []:
            msg = await bot.send_message(call.from_user.id, '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä!')
            asyncio.create_task(self_delete_message(msg, 2))
            
        elif card != []:
            await Form.bonus.set()
            await call.message.answer(f'üõí <b>–í–ê–® –ó–ê–ö–ê–ó:</b>\n\n‚îå{res}\n‚îÇ\n'
                                    f'‚îîüõç <b>–ò–¢–û–ì–û:</b> {sum}‚ÇΩ\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                    f'üéÅ <b>–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:</b> {bon}\n'
                                    f'üéÅ <b>–ù–∞—á–∏—Å–ª–∏—Ç—å:</b> {math.ceil(sum/100*5)}', reply_markup=Bonus)
    else:
        msg1 = await bot.send_message(call.from_user.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å 09:00 –¥–æ 20:00.')
        asyncio.create_task(self_delete_message(msg1, 2))

#–û–¢–ú–ï–ù–ê
@dp.callback_query_handler(text_contains="–û—Ç–º–µ–Ω–∞", state='*')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(call: CallbackQuery, state: FSMContext):
    connect = sqlite3.connect('bot.db')
    cursor = connect.cursor()
    cursor.execute("""DELETE FROM deliv WHERE user_id=(?)""", [call.from_user.id])
    connect.commit()
    cursor.close()

    current_state = await state.get_state()
    if current_state is None:
       return
    
    await call.message.delete()
    await state.finish()

#–ë–û–ù–£–°
@dp.callback_query_handler(state=Form.bonus)
async def process_bonus(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['bonus'] = call.data
        data['id'] = call.from_user.id

    connect = sqlite3.connect('bot.db')
    cursor = connect.cursor()

    sum = cursor.execute("""SELECT SUM(price) FROM card WHERE user_id=(?)""", [call.from_user.id]).fetchone()[0]
    bon1 = math.ceil(sum/100*5)
    bon = cursor.execute("""SELECT bonus FROM users WHERE user_id=(?)""", [call.from_user.id]).fetchone()[0]
    cursor.execute("""INSERT INTO deliv (user_id) VALUES (?)""", (data['id'],))

    if call.data == "–°–ø–∏—Å–∞—Ç—å":
        await Form.kolvo.set()
        await call.message.edit_text('–û—Ç–ª–∏—á–Ω–æ!\n\n'
                                    f'<b>–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏—Å–∞—Ç—å?</b>\n'
                                    f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                                    f'üéÅ <b>–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:</b> {bon}')

    elif call.data == "–ù–∞—á–∏—Å–ª–∏—Ç—å":
        cursor.execute("""UPDATE deliv SET kolvo=? WHERE user_id=?""", (bon1, call.from_user.id))
        await Form.dostavka.set()
        await call.message.edit_text('–°—É–ø–µ—Ä!\n\n'
                                     '<b>–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑?</b>', reply_markup=deliv)
    
    cursor.close()
    connect.commit()

# #–ö–û–õ–ò–ß–ï–°–¢–í–û –ë–û–ù–£–°–û–í
@dp.message_handler(state=Form.kolvo)
async def process_kolvo(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['kolvo'] = message.text
    
    connect = sqlite3.connect('bot.db')
    cursor = connect.cursor()

    bon = cursor.execute("""SELECT bonus FROM users WHERE user_id=(?)""", [message.from_user.id]).fetchone()[0]

    if message.text.isdigit():
        if int(message.text) <= bon:
            cursor.execute("""UPDATE deliv SET kolvo=?WHERE user_id=?""", (data['kolvo'], message.from_user.id))
            await Form.dostavka.set()
            await message.answer('–û—Ç–ª–∏—á–Ω–æ!\n\n'
                                '<b>–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑?</b>', reply_markup=deliv)
        else:
            msg = await bot.send_message(message.from_user.id,'–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ—é—â–∏—Ö—Å—è –±–æ–Ω—É—Å–æ–≤!')
            asyncio.create_task(self_delete_message(msg, 2))    
    
    else:
        msg1 = await bot.send_message(message.from_user.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
        asyncio.create_task(self_delete_message(msg1, 2))

    cursor.close()
    connect.commit()

#–î–û–°–¢–ê–í–ö–ê
@dp.callback_query_handler(state=Form.dostavka)
async def process_dostavka(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['dostavka'] = call.data

    if call.data == "–ó–∞–±–µ—Ä—É –°–∞–º":
        await Form.comment.set()
        await call.message.edit_text("–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∫ —Å–≤–æ–µ–º—É –∑–∞–∫–∞–∑—É:")

    elif call.data == "–î–æ—Å—Ç–∞–≤–∫–∞":
        await Form.comment.set()
        await call.message.edit_text("–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ!\n\n–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–º–µ—â–µ–Ω–∏–π:\n\n"
                                        "–ú–µ–ª—å–Ω–∏–∫–∞–π—Ç–µ 106\n–¢–†–¶ '–°–∏—Ç–∏ –ú–æ–ª–ª'\n–¢–†–¶ '–ú–∞—Ç—Ä–µ—à–∫–∞'\n–ñ–ö '–ê–π–≤–∞–∑–æ–≤—Å–∫–∏–π'\n\n"
                                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Ñ–∏—Å–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è:\n")
        
#–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô
@dp.message_handler(state=Form.comment)
async def process_comment(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['comment'] = message.text

    await Form.address.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ–π–Ω—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–µ –≤—Å–µ–≥–æ:", reply_markup=adres)

#–ê–î–†–ï–°
@dp.callback_query_handler(state=Form.address)
async def process_address(call: CallbackQuery, state: FSMContext):
    
    async with state.proxy() as data:
        data['tochka'] = call.data
                         
    await Form.time.set()
    await call.message.edit_text("–ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤?", reply_markup=time)

#–í–†–ï–ú–Ø
@dp.callback_query_handler(state=Form.time)
async def process_time(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
            data['vrem'] = call.data

    connect = sqlite3.connect('bot.db')
    cursor = connect.cursor()

    sum = cursor.execute("""SELECT SUM(price) FROM card WHERE user_id=(?)""", [call.from_user.id]).fetchone()[0]
    bon = cursor.execute("""SELECT kolvo FROM deliv WHERE user_id=(?)""", [call.from_user.id]).fetchone()[0]

    if call.data == "–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ":       
            prod = cursor.execute("""SELECT prod_id, price, value FROM card WHERE user_id=(?)""", [call.from_user.id]).fetchall()
            cursor.execute("""UPDATE deliv 
                      SET dostavka=?, address=?, time=?, comment=?, bon=?
                      WHERE user_id=?""", 
                      (data['dostavka'], data['tochka'],data['vrem'], data['comment'], data['bonus'], call.from_user.id))

            card = []
            for i in prod:
                card.append(f"{i[0]} √ó {i[2]}—à—Ç = {i[1]}‚ÇΩ")
            res = ("\n‚îú".join(map(str, card)))

            if data['bonus'] == '–°–ø–∏—Å–∞—Ç—å':
                cursor.execute("""INSERT INTO card VALUES(?,?,?,?)""", ((call.from_user.id), '–ë–æ–Ω—É—Å—ã', (-bon), 1))
                await call.message.edit_text(
                        f"üõí <b>–í–ê–® –ó–ê–ö–ê–ó:</b>\n\n‚îå{res}\n‚îÇ\n"
                        f"‚îîüõç <b>–ò–¢–û–ì–û:</b> {sum}‚ÇΩ - {bon}‚ÇΩ = {sum-bon}‚ÇΩ\n\n"
                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                        f"üöö <b>–î–ê–ù–ù–´–ï –î–û–°–¢–ê–í–ö–ò:</b>\n\n"
                        f"‚îåüì¶ <b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {data['dostavka']}\n‚îÇ\n"
                        f"‚îúüéÅ <b>–ë–æ–Ω—É—Å—ã:</b> {data['bonus']}({bon})\n‚îÇ\n"
                        f"‚îú‚è∞ <b>–í—Ä–µ–º—è:</b> {data['vrem']}\n‚îÇ\n"
                        f"‚îîüìç <b>–ê–¥—Ä–µ—Å:</b> {data['tochka']}", reply_markup=pay)
                await state.finish()

            elif data['bonus'] == '–ù–∞—á–∏—Å–ª–∏—Ç—å':
                await call.message.edit_text(
                        f"üõí <b>–í–ê–® –ó–ê–ö–ê–ó:</b>\n\n‚îå{res}\n‚îÇ\n"
                        f"‚îîüõç <b>–ò–¢–û–ì–û:</b> {sum}‚ÇΩ\n\n"
                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                        f"üöö <b>–î–ê–ù–ù–´–ï –î–û–°–¢–ê–í–ö–ò:</b>\n\n"
                        f"‚îåüì¶ <b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {data['dostavka']}\n‚îÇ\n"
                        f"‚îúüéÅ <b>–ë–æ–Ω—É—Å—ã:</b> {data['bonus']}({bon})\n‚îÇ\n"
                        f"‚îú‚è∞ <b>–í—Ä–µ–º—è:</b> {data['vrem']}\n‚îÇ\n"
                        f"‚îîüìç <b>–ê–¥—Ä–µ—Å:</b> {data['tochka']}", reply_markup=pay)
                await state.finish()

    elif call.data == "–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è":
            if data['bonus'] == '–°–ø–∏—Å–∞—Ç—å':
                cursor.execute("""INSERT INTO card VALUES(?,?,?,?)""", ((call.from_user.id), '–ë–æ–Ω—É—Å—ã', (-bon), 1))
                await Form.hourse.set()
                await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", reply_markup=hourse)

            elif data['bonus'] == '–ù–∞—á–∏—Å–ª–∏—Ç—å':
                await Form.hourse.set()
                await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", reply_markup=hourse)
    
    cursor.close()
    connect.commit()

#–ß–ê–°–´
@dp.callback_query_handler(state=Form.hourse)
async def process_hourse(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['hourse'] = call.data

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—É:", reply_markup=min) 
    await Form.min.set()

#–ú–ò–ù–£–¢–´
@dp.callback_query_handler(state=Form.min)
async def process_min(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['min'] = call.data

    connect = sqlite3.connect('bot.db')
    cursor = connect.cursor()
     
    sum = cursor.execute("""SELECT SUM(price) FROM card WHERE user_id=(?)""", [call.from_user.id]).fetchone()[0]
    bon = cursor.execute("""SELECT kolvo FROM deliv WHERE user_id=(?)""", [call.from_user.id]).fetchone()[0]

    prod = cursor.execute("""SELECT prod_id, price, value FROM card WHERE user_id=(?)""", [call.from_user.id]).fetchall()
    cursor.execute("""UPDATE deliv 
                      SET dostavka=?, address=?, time=?, hours=?, min=?, comment=?, bon=?
                      WHERE user_id=?""", 
                      (data['dostavka'], data['tochka'],data['vrem'], data['hourse'], data['min'], data['comment'], data['bonus'], call.from_user.id))

    card = []
    for i in prod:
        card.append(f"{i[0]} √ó {i[2]}—à—Ç = {i[1]}‚ÇΩ")
    res = ("\n‚îú".join(map(str, card)))

    cursor.close()
    connect.commit()
    
    if data['bonus'] == '–°–ø–∏—Å–∞—Ç—å':
        await call.message.edit_text(
                        f"üõí <b>–í–ê–® –ó–ê–ö–ê–ó:</b>\n\n‚îå{res}\n‚îÇ\n"
                        f"‚îîüõç <b>–ò–¢–û–ì–û:</b> {sum}‚ÇΩ - {bon}‚ÇΩ = {sum-bon}‚ÇΩ\n\n"
                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                        f"üöö <b>–î–ê–ù–ù–´–ï –î–û–°–¢–ê–í–ö–ò:</b>\n\n"
                        f"‚îåüì¶ <b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {data['dostavka']}\n‚îÇ\n"
                        f"‚îúüéÅ <b>–ë–æ–Ω—É—Å—ã:</b> {data['bonus']}({bon})\n‚îÇ\n"
                        f"‚îú‚è∞ <b>–í—Ä–µ–º—è:</b> {data['hourse']}:{data['min']}\n‚îÇ\n"
                        f"‚îîüìç <b>–ê–¥—Ä–µ—Å:</b> {data['tochka']}", reply_markup=pay)
        await state.finish()
        
    elif data['bonus'] == '–ù–∞—á–∏—Å–ª–∏—Ç—å':
        await call.message.edit_text(
                        f"üõí <b>–í–ê–® –ó–ê–ö–ê–ó:</b>\n\n‚îå{res}\n‚îÇ\n"
                        f"‚îîüõç <b>–ò–¢–û–ì–û:</b> {sum}‚ÇΩ\n\n"
                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                        f"üöö <b>–î–ê–ù–ù–´–ï –î–û–°–¢–ê–í–ö–ò:</b>\n\n"
                        f"‚îåüì¶ <b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {data['dostavka']}\n‚îÇ\n"
                        f"‚îúüéÅ <b>–ë–æ–Ω—É—Å—ã:</b> {data['bonus']}({bon})\n‚îÇ\n"
                        f"‚îú‚è∞ <b>–í—Ä–µ–º—è:</b> {data['hourse']}:{data['min']}\n‚îÇ\n"
                        f"‚îîüìç <b>–ê–¥—Ä–µ—Å:</b> {data['tochka']}", reply_markup=pay)
        await state.finish()


