import sqlite3
import asyncio
import datetime
import os

from main import dp, bot
from aiogram import types
from dotenv import load_dotenv
from keyboard.kb_client import Card
from handler.handler_delete import self_delete_message
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, ContentType


load_dotenv()
button_user_map = {}

#–û–ü–õ–ê–¢–ê
@dp.callback_query_handler(text_contains='–û–ø–ª–∞—Ç–∏—Ç—å')
async def buy(call: CallbackQuery):
     connect = sqlite3.connect('bot.db')
     cursor = connect.cursor()
     data = cursor.execute("""SELECT user_id, prod_id, price FROM card WHERE user_id=(?)""", [call.from_user.id]).fetchall()
     cursor.close()
     connect.commit()
     cursor = connect.cursor()
     new_data = []
     for i in range(len(data)):
          new_data.append(cursor.execute("""SELECT * FROM card WHERE prod_id=(?)""", [data[i][1]]).fetchall())
     cursor.close()
     connect.commit()
     connect.close
     new_data = [new_data[i][0] for i in range(len(new_data))]
     price = [LabeledPrice(label=i[1], amount=i[2]*100) for i in new_data]

     if price == []:
          msg = await bot.send_message(call.from_user.id, '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä!')
          asyncio.create_task(self_delete_message(msg, 2))
     
     elif price != []:
          await bot.send_invoice(call.from_user.id,
               title='Monolyte / –û–ø–ª–∞—Ç–∞', 
               description='–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É',
               provider_token=os.environ.get('PAY_TOKEN_MASTER'),
               currency='rub',
               max_tip_amount = 100000,
               suggested_tip_amounts = [5000, 10000, 20000, 30000],
               need_email=True,
               need_phone_number=True,
               prices=price, 
               start_parameter='example', 
               payload='some_invoice')
     

@dp.pre_checkout_query_handler(lambda q: True)
async def checkout_process(pre_checkout_query: PreCheckoutQuery):
     await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def pay(message: Message):
     connect = sqlite3.connect('bot.db')
     cursor = connect.cursor()
     
     #C–û–ó–î–ê–ù–ò–ï –ö–ù–û–ü–û–ö –î–õ–Ø –°–û–¢–†–£–î–ù–ò–ö–û–í
     Process = types.InlineKeyboardMarkup(row_width=2)
     user_id = message.from_user.id
     button1 = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É", callback_data="–ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É", one_time=True)
     button2 = types.InlineKeyboardButton("–ì–æ—Ç–æ–≤", callback_data="–ì–æ—Ç–æ–≤", one_time=True)
     Process.add(button1, button2)
    
     button_user_map[button1.callback_data] = user_id
     button_user_map[button2.callback_data] = user_id


     #–î–û–ë–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–£ classific
     cursor.execute(""" SELECT user_id, prod_id, value, price 
                         FROM card 
                         WHERE user_id=(?)""", [message.chat.id])
     rows = cursor.fetchall()

     for row in rows:
          user_id, prod_id, value, price = row
          current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
          cursor.execute('''INSERT INTO classific (user_id, prod_id, value, price, data)
                              VALUES (?, ?, ?, ?, ?)''', (user_id, prod_id, value, price, current_time))
     
     #–û–¢–ü–†–ê–í–ö–ê –ß–ï–ö–ê –í –†–ê–ë.–ì–†–£–ü–ü–£
     user_id = message.from_user.url
     user_name = message.chat.first_name
     sum = cursor.execute("""SELECT SUM(price) FROM card WHERE user_id=(?)""", [message.chat.id]).fetchone()[0]
     prod = cursor.execute("""SELECT prod_id, price, value FROM card WHERE user_id=(?)""", [message.chat.id]).fetchall()
     deliv = cursor.execute("""SELECT * FROM deliv WHERE user_id=(?)""", [message.chat.id]).fetchall()
     bon = cursor.execute("""SELECT bon FROM deliv WHERE user_id=(?)""", [message.chat.id]).fetchone()[0]
     address = cursor.execute("""SELECT address FROM deliv WHERE user_id=(?)""", [message.chat.id]).fetchone()[0]

     c = []
     for i in prod:
          c.append(f"{i[0]} √ó {i[2]}—à—Ç = {i[1]}‚ÇΩ")
     res = ("\n‚îú".join(map(str, c)))

     d = []
     for i in deliv:
          d.append(
               f"‚îå#Ô∏è‚É£ <b>–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n‚îú{user_id} - {user_name}\n‚îÇ\n"
               f"‚îîüõç <b>–ò–¢–û–ì–û:</b> {sum}‚ÇΩ\n\n"
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
               f"üöö <b>–î–ê–ù–ù–´–ï –î–û–°–¢–ê–í–ö–ò:</b>\n\n"
               f"‚îåüõí<b>–ó–∞–∫–∞–∑:</b>\n‚îú{res}\n‚îÇ\n"
               f"‚îúüì¶<b>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {i[1]}\n‚îÇ\n"
               f"‚îúüìç<b>–ö–æ—Ñ–µ–π–Ω—è:</b> {i[2]}\n‚îÇ\n"
               f"‚îúüì™<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {i[3]}\n‚îÇ\n"
               f"‚îú‚è∞<b>–í—Ä–µ–º—è:</b> {i[4]}:{i[5]}\n‚îÇ\n"
               f"‚îîüí¨<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {i[6]}")
     r = ("".join(map(str, d)))
     
     match bon:
          case '–°–ø–∏—Å–∞—Ç—å':
               bonus = cursor.execute("""SELECT bonus-kolvo FROM users, deliv WHERE users.user_id=(?) AND deliv.user_id=(?)""", (message.chat.id, message.chat.id))
               bon = bonus.fetchone()[0]
               cursor.execute("""UPDATE users SET bonus=? WHERE user_id=?""", (int(bon), message.chat.id))

          case '–ù–∞—á–∏—Å–ª–∏—Ç—å':
               bonus = cursor.execute("""SELECT bonus+kolvo FROM users, deliv WHERE users.user_id=(?) AND deliv.user_id=(?)""", (message.chat.id, message.chat.id))
               bon = bonus.fetchone()[0]
               cursor.execute("""UPDATE users SET bonus=? WHERE user_id=?""", (int(bon), message.chat.id))

     match address:
          case '–ú–µ–ª—å–Ω–∏–∫–∞–π—Ç–µ 106':
               await bot.send_message(os.environ.get('CHAT_ID_MELNIK'), text=f'{r}', reply_markup=Process)
          case '–¢–†–¶ "–°–∏—Ç–∏ –ú–æ–ª–ª"':
               await bot.send_message(os.environ.get('CHAT_ID_CITY_MOLL'), text=f'{r}', reply_markup=Process)
          case '–¢–†–¶ "–ú–∞—Ç—Ä–µ—à–∫–∞"':
               await bot.send_message(os.environ.get('CHAT_ID_MATRESHKA'), text=f'{r}', reply_markup=Process)
          case '–ñ–ö "–ê–π–≤–∞–∑–æ–≤—Å–∫–∏–π"':
               await bot.send_message(os.environ.get('CHAT_ID_AIVA'), text=f'{r}', reply_markup=Process)
               
     cursor.execute("""DELETE FROM card WHERE user_id=(?)""", [message.chat.id])
     cursor.close()
     connect.commit()
     connect.close()


#–ü–†–û–°–ú–û–¢–† –ö–û–†–ó–ò–ù–´
@dp.callback_query_handler(text_contains='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ö–æ—Ä–∑–∏–Ω—É')
async def card(call: CallbackQuery):
     connect = sqlite3.connect('bot.db')
     cursor = connect.cursor()

     cursor.execute("""DELETE FROM card WHERE user_id=(?) AND prod_id=(?)""", ((call.from_user.id), '–ë–æ–Ω—É—Å—ã'))
     sum = cursor.execute("""SELECT SUM(price) FROM card WHERE user_id=(?)""", [call.from_user.id]).fetchone()[0]
     prod = cursor.execute("""SELECT prod_id, price, value FROM card WHERE user_id=(?)""", [call.from_user.id]).fetchall()
     
     card = []
     for i in prod:
          card.append(f"{i[0]} √ó {i[2]}—à—Ç = {i[1]}‚ÇΩ")
     res = ("\n‚îú".join(map(str, card)))

     cursor.close()
     connect.commit()

     if card == []:
          msg = await bot.send_message(call.from_user.id, '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä!')
          asyncio.create_task(self_delete_message(msg, 2))

     elif card != []:
          await call.message.edit_caption(caption=f'üõí <b>–í–ê–®–ê –ö–û–†–ó–ò–ù–ê:</b>\n\n'
                                                  f'‚îå{res}\n‚îÇ\n‚îîüõç <b>–ò–¢–û–ì–û:</b> {sum}‚ÇΩ', reply_markup=Card)

#–û–ß–ò–°–¢–ö–ê –ö–û–†–ó–ò–ù–´
@dp.callback_query_handler(text_contains='–û—á–∏—Å—Ç–∏—Ç—å –ö–æ—Ä–∑–∏–Ω—É')
async def clear(call: CallbackQuery):
     connect = sqlite3.connect('bot.db')
     cursor = connect.cursor()
     cursor.execute("""DELETE FROM card WHERE user_id=(?)""", [call.from_user.id])
     cursor.close()
     connect.commit()
     connect.close()

     await call.message.edit_caption(caption=f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –∏—Ö!' 
     '\n\n–ê —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç–æ—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è', reply_markup=Card)
     
     msg = await bot.send_message(call.from_user.id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!')
     asyncio.create_task(self_delete_message(msg, 2))
