# # import matplotlib
# # import datetime
# # import numpy as np
# # import pandas as pd
# # from matplotlib import colors
# # import matplotlib.pyplot as plt
# # import matplotlib.pyplot as plt, numpy as np
# # import sys
# # import warnings
# # import pandas as pd
# # import sqlite3
# # import aiogram
# # from aiogram.types import Message, CallbackQuery
# # from main import dp

# # @dp.callback_query_handler(text_contains='X')
# # async def skl_hand(call: CallbackQuery):

# #     con = sqlite3.connect("bot.db")
# #     df = pd.read_sql_query("SELECT * FROM classific", con)
# #     print(df.head())

# #     # skl = []
# #     # for i in df:
# #     #     skl.append(f"{i[0]} ‚Äî {i[1]} ‚Äî {i[2]}")
# #     # res = ("\n    ".join(map(str, skl)))
    
# #     con.close()
# #     await call.message.answer(f'–ó–∞–∫–∞–∑—ã: \n\n{df}')


# # # # Read sqlite query results into a pandas DataFrame
# # # con = sqlite3.connect("bot.db")
# # # df = pd.read_sql_query("SELECT * FROM classific", con)

# # # # Verify that result of SQL query is stored in the dataframe
# # # print(df.head())


# # # con.close()


# # import sqlite3
# # import pandas as pd
# # from sklearn.cluster import KMeans

# # # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
# # conn = sqlite3.connect('bot.db')

# # # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤ –≤–∏–¥–µ DataFrame
# # df = pd.read_sql_query("SELECT user_id, prod_id, value FROM classific", conn)

# # # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Ç–æ–≤–∞—Ä—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# # grouped_df = df.groupby(['user_id', 'prod_id'])['value'].sum().unstack().fillna(0)

# # # –ò—Å–ø–æ–ª—å–∑—É–µ–º KMeans –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
# # kmeans = KMeans(n_clusters=3).fit(grouped_df)

# # # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
# # labels = kmeans.labels_

# # # –í—ã–≤–æ–¥–∏–º –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# # for i, label in enumerate(labels):
# #     print(f"User {i+1} belongs to cluster {label}")




# # ____________________________________________________________________________________#
# # import sqlite3
# # import pandas as pd
# # from sklearn.preprocessing import StandardScaler
# # from sklearn.cluster import KMeans
# # import matplotlib.pyplot as plt

# # # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
# # conn = sqlite3.connect('mydatabase.db')
# # cursor = conn.cursor()

# # # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
# # cursor.execute("SELECT user_id, prod_id, value FROM classific")
# # data = cursor.fetchall()

# # # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# # df = pd.DataFrame(data, columns=['user_id', 'prod_id', 'value'])

# # # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (pivot table)
# # pivot_table = pd.pivot_table(df, values='value', index=['user_id'], columns=['prod_id'], fill_value=0)

# # # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∫ –¥–∞–Ω–Ω—ã–º
# # scaler = StandardScaler()
# # scaled_data = scaler.fit_transform(pivot_table)

# # # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –º–µ—Ç–æ–¥–æ–º "–ª–æ–∫—Ç—è" (Elbow Method)
# # sse = []
# # for k in range(1, 11):
# #     kmeans = KMeans(n_clusters=k, random_state=0)
# #     kmeans.fit(scaled_data)
# #     sse.append(kmeans.inertia_)
# # plt.plot(range(1, 11), sse)
# # plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤')
# # plt.ylabel('SSE')
# # plt.show()

# # # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ KMeans —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
# # kmeans = KMeans(n_clusters=4, random_state=0)

# # # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –∫ –¥–∞–Ω–Ω—ã–º
# # clusters = kmeans.fit_predict(scaled_data)

# # # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# # pivot_table['cluster'] = clusters

# # # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
# # print(pivot_table)



# # import sqlite3
# # from sklearn.cluster import KMeans
# # import numpy as np
# # import pandas as pd
# # from aiogram import Bot, Dispatcher, types
# # from aiogram.types import CallbackQuery
# from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
# # from aiogram.utils import executor

# # Start = InlineKeyboardMarkup(
# #     inline_keyboard=[
# #         [
# #             InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å üë§', callback_data='–ü—Ä–æ—Ñ–∏–ª—å')
# #         ],
# #         [
# #             InlineKeyboardButton(text='–ú–µ–Ω—é üìÑ', callback_data='–ú–µ–Ω—é')
# #         ],
# #         [
# #             InlineKeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üóë', callback_data='–ö–æ—Ä–∑–∏–Ω–∞')
# #         ],
# #         [
# #             InlineKeyboardButton(text='–ü–æ–º–æ—â—å üõ†', callback_data='–ü–æ–º–æ—â—å')
# #         ],
# #         [
# #             InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç üíª', url='http://monolyte.tilda.ws/')
# #         ],
# #         [
# #             InlineKeyboardButton(text='–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç üí≠', callback_data='–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç')
# #         ]
# #     ]
# # )

# # # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
# # conn = sqlite3.connect('bot.db')

# # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# # bot = Bot(token='5441561569:AAGVI_7jAklHrEUF95QJKBj8ME5o9TNeBvY')
# # dp = Dispatcher(bot)

# # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
# # def cluster_data():
# #     # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤ DataFrame
# #     df = pd.read_sql_query('SELECT user_id, prod_id, value FROM classific', conn)
# #     # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
# #     df = df.groupby(['user_id', 'prod_id']).sum().reset_index()
# #     # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ KMeans
# #     X = df.pivot(index='user_id', columns='prod_id', values='value').fillna(0)
# #     X = np.array(X)
# #     # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º KMeans –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
# #     kmeans = KMeans(n_clusters=3)
# #     kmeans.fit(X)
# #     labels = kmeans.predict(X)
# #     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
# #     return labels

# # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
# # @dp.message_handler(commands=['start'])
# # async def process_start_command(message: types.Message):
# #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
# #     await bot.send_message(chat_id=message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞.", reply_markup=Start)

# # # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å calldata='test'
# # @dp.callback_query_handler(text_contains='–ú–µ–Ω—é')
# # async def process_test_callback(call: CallbackQuery):
# #     # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
# #     labels = cluster_data()
# #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
# #     message_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:\n–ö–ª–∞—Å—Ç–µ—Ä 0: {labels(0)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–ö–ª–∞—Å—Ç–µ—Ä 1: {labels(1)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–ö–ª–∞—Å—Ç–µ—Ä 2: {labels(2)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
# #     await bot.send_message(chat_id=call.from_user.id, text=message_text)

# # # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
# # if __name__ == '__main__':
# #     executor.start_polling(dp)




# import sqlite3
# from sklearn.cluster import KMeans
# from aiogram import Bot, Dispatcher, types
# from aiogram.types import CallbackQuery
# from aiogram.utils import executor
# from aiogram.dispatcher.filters import Command

# # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
# conn = sqlite3.connect('bot.db')
# cursor = conn.cursor()

# # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token='5441561569:AAGVI_7jAklHrEUF95QJKBj8ME5o9TNeBvY')
# dp = Dispatcher(bot)

# Start = InlineKeyboardMarkup(
#     inline_keyboard=[
#         [
#             InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å üë§', callback_data='–ü—Ä–æ—Ñ–∏–ª—å')
#         ],
#         [
#             InlineKeyboardButton(text='–ú–µ–Ω—é üìÑ', callback_data='–ú–µ–Ω—é')
#         ],
#         [
#             InlineKeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üóë', callback_data='–ö–æ—Ä–∑–∏–Ω–∞')
#         ],
#         [
#             InlineKeyboardButton(text='–ü–æ–º–æ—â—å üõ†', callback_data='–ü–æ–º–æ—â—å')
#         ],
#         [
#             InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç üíª', url='http://monolyte.tilda.ws/')
#         ],
#         [
#             InlineKeyboardButton(text='–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç üí≠', callback_data='–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç')
#         ]
#     ]
# )

# # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
# @dp.message_handler(commands=['start'])
# async def process_start_command(message: types.Message):
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
#     await bot.send_message(chat_id=message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞.", reply_markup=Start)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å calldata='test'
# @dp.callback_query_handler(text_contains='–ú–µ–Ω—é')
# async def back_hand(call: CallbackQuery):
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
#     cursor.execute("SELECT user_id, prod_id, value FROM classific")
#     rows = cursor.fetchall()

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     user_purchases = {}
#     for row in rows:
#         user_id = row[0]
#         prod_id = row[1]
#         value = row[2]

#         if user_id not in user_purchases:
#             user_purchases[user_id] = {}

#         user_purchases[user_id][prod_id] = value

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –º–∞—Ç—Ä–∏—Ü—É –ø–æ–∫—É–ø–æ–∫
#     products = set()
#     user_matrix = []
#     for user_id, purchases in user_purchases.items():
#         user_row = []
#         for prod_id in products:
#             if prod_id in purchases:
#                 user_row.append(purchases[prod_id])
#             else:
#                 user_row.append(0)

#         for prod_id in purchases:
#             products.add(prod_id)
#             user_row.append(purchases[prod_id])

#         user_matrix.append(user_row)

#     # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–æ–≤–∞—Ä–∞–º
#     kmeans = KMeans(n_clusters=3, random_state=0).fit(user_matrix)
#     labels = kmeans.labels_

#     # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
#     for user_id, label in zip(user_purchases.keys(), str(labels)):
#         await bot.send_message(call.from_user.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–Ω–µ—Å–µ–Ω –∫ –≥—Ä—É–ø–ø–µ {label}")

#     # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#     cursor.close()
#     conn.close()


# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True)

